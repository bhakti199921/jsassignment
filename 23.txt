    function fruitsIterator(values){
    let nextIndex=0;
    return{
        nx:function(){
            if(nextIndex<value.length){
return {
         value:values[nextIndex++],
        done:false
}
            }else{
                return{done:true}
            }
        }
    }
}
const fruits=["Apple","Banana","Mango"];
console.log(fruits);
const myfruit=fruitsIterator(fruits);
console.log(myfruit.next())
--------------
generator function:-
-they are useful tool that allows us to create iterators by defining a function
-they allow us to stop and continue execution as needed.
-to create a generator function we use astrick(*)symbol in front of the name.
eg.
function *name(){

}

--> yield:- we can add yeild keyword to every line where we want to iteration to stop.
The next() method will then return of that line as a iterator object{
    value:'something',done:boolean
}
ex.

function *generate(){
    yeild "sumit";
    yeild "sumit";
    yeild "sumit";
}

const gen=generate();
console.log(gen.next());
console.log(gen.next());
console.log(gen.next());

------------------------------
function *idGenerator(){
    let -=0;
    while(true){
        yield i++;
    }
}
const ids=idGenerator();
console.log(ids.next().value);
console.log(ids.next().value);
console.log(ids.next().value);
console.log(ids.next().value);
for (let val of ids){
    console.log(val);
}

advantages of generator
->they are memory efficient.
-use cases
    -redux-saga
    -async-await

-------------
-